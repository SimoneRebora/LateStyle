final_coords <- character()
cat(iter, section, "\n")
section <- section+1
next
}
if(center_crossing()==TRUE){
print("Column switch")
final_coords <- update_coords(region_coord[page_region])
book_region <- image_crop(full_page, paste(final_coords[2] - final_coords[1], "x", final_coords[4] - final_coords[3], "+", final_coords[1], "+", final_coords[3], sep = ""))
plot(book_region)
image_write(book_region, path = paste(output_folder, sprintf("%02d", iter), sprintf("%02d", section), ".png", sep = ""), format = "png")
final_coords <- character()
cat(iter, section, "\n")
section <- section+1
next
}
final_coords <- update_coords(region_coord[page_region])
cat(iter, section, "\n")
section=section+1
}
}
library(XML)
library(magick)
filenames <- list.files("/home/rsimone/book_FSE/Corpus_TSZ/page-regions/page", pattern="*.nrm.xml", full.names=TRUE)
imagenames <- list.files("/home/rsimone/book_FSE/Corpus_TSZ", pattern="*.nrm.png", full.names=TRUE)
output_folder <- "/home/rsimone/book_FSE/Corpus_TSZ/regions-images/"
##select regions with transcribed text (still manual, based on Transkribus areas...)
regions_selection <- list(c(20,21), c(2:8, 10:15), c(2:7, 10:14), c(8:22), c(2:8), c(2:9), c(2:10), c(2:6), c(5:12), c(23:24), c(1:5, 8:11), c(7:13), c(2:6), c(3:10), c(2:19), c(9:12), c(1:3, 8, 9, 4:6, 10, 11), c(3:9), c(5:8), c(8:12), c(2:6), c(2:8), c(1:3, 11))
final_coords <- character()
ns <- c(ns="http://schema.primaresearch.org/PAGE/gts/pagecontent/2013-07-15")
#############
##Functions
update_coords <- function(region_coord_tmp){
coords_tmp <- region_coord_tmp
###extract this from Page file
dummy <- unlist(strsplit(coords_tmp, " "))
x_min_region <- as.numeric(unlist(strsplit(dummy[1], ","))[1])
x_max_region <- as.numeric(unlist(strsplit(dummy[2], ","))[1])
y_min_region <- as.numeric(unlist(strsplit(dummy[1], ","))[2])
y_max_region <- as.numeric(unlist(strsplit(dummy[3], ","))[2])
if(length(final_coords)==4){
x_min_region <- min(x_min_region, final_coords[1])
x_max_region <- max(x_max_region, final_coords[2])
y_min_region <- min(y_min_region, final_coords[3])
y_max_region <- max(y_max_region, final_coords[4])
}
final_coords <- c(x_min_region, x_max_region, y_min_region, y_max_region)
return(final_coords)
}
center_crossing <- function(){
coords_tmp <- region_coord[regions_selection[[iter]][section]]
###extract this from Page file
dummy <- unlist(strsplit(coords_tmp, " "))
x_min_region <- as.numeric(unlist(strsplit(dummy[1], ","))[1])
x_max_region <- as.numeric(unlist(strsplit(dummy[2], ","))[1])
coords_tmp <- region_coord[regions_selection[[iter]][section+1]]
dummy <- unlist(strsplit(coords_tmp, " "))
x_min_region2 <- as.numeric(unlist(strsplit(dummy[1], ","))[1])
x_max_region2 <- as.numeric(unlist(strsplit(dummy[2], ","))[1])
region2_mean <- (x_min_region2+x_max_region2)/2
if(region2_mean < x_max_region & region2_mean > x_min_region){
return(FALSE)
}
else{return(TRUE)}
}
################
for(iter in 1:length(regions_selection)){
result <- xmlTreeParse(filenames[[iter]], useInternalNodes = TRUE)
rootnode <- xmlRoot(result)
region_coord <- xpathSApply(rootnode, "//ns:TextRegion/ns:Coords", xmlGetAttr, "points", namespaces = ns)
region_nodes <- xpathSApply(rootnode, "//ns:TextRegion", namespaces = ns)
full_page <- image_read(imagenames[iter])
#plot(full_page)
section <- 1
for(page_region in regions_selection[[iter]]){
if(section==length(regions_selection[[iter]])){
print("Final line")
final_coords <- update_coords(region_coord[page_region])
book_region <- image_crop(full_page, paste(final_coords[2] - final_coords[1], "x", final_coords[4] - final_coords[3], "+", final_coords[1], "+", final_coords[3], sep = ""))
plot(book_region)
image_write(book_region, path = paste(output_folder, sprintf("%02d", iter), sprintf("%02d", section), ".png", sep = ""), format = "png")
final_coords <- character()
cat(iter, section, "\n")
section <- section+1
next
}
if(center_crossing()==TRUE){
print("Column switch")
final_coords <- update_coords(region_coord[page_region])
book_region <- image_crop(full_page, paste(final_coords[2] - final_coords[1], "x", final_coords[4] - final_coords[3], "+", final_coords[1], "+", final_coords[3], sep = ""))
plot(book_region)
image_write(book_region, path = paste(output_folder, sprintf("%02d", iter), sprintf("%02d", section), ".png", sep = ""), format = "png")
final_coords <- character()
cat(iter, section, "\n")
section <- section+1
next
}
final_coords <- update_coords(region_coord[page_region])
cat(iter, section, "\n")
section=section+1
}
}
library(XML)
library(magick)
filenames <- list.files("/home/rsimone/book_FSE/Corpus_TSZ/page-regions/page", pattern="*.nrm.xml", full.names=TRUE)
imagenames <- list.files("/home/rsimone/book_FSE/Corpus_TSZ", pattern="*.nrm.png", full.names=TRUE)
output_folder <- "/home/rsimone/book_FSE/Corpus_TSZ/regions-images/"
##select regions with transcribed text (still manual, based on Transkribus areas...)
regions_selection <- list(c(20,21), c(2:8, 10:15), c(2:7, 10:14), c(8:22), c(2:8), c(2:9), c(2:10), c(2:6), c(5:12), c(23:24), c(1:5, 8:11), c(7:13), c(2:6), c(3:10), c(2:19), c(9:12), c(1:3, 8, 9, 4:6, 10, 11), c(3:9), c(5:8), c(8:12), c(2:6), c(2:8), c(1:3, 11))
final_coords <- character()
ns <- c(ns="http://schema.primaresearch.org/PAGE/gts/pagecontent/2013-07-15")
#############
##Functions
update_coords <- function(region_coord_tmp){
coords_tmp <- region_coord_tmp
###extract this from Page file
dummy <- unlist(strsplit(coords_tmp, " "))
x_min_region <- as.numeric(unlist(strsplit(dummy[1], ","))[1])
x_max_region <- as.numeric(unlist(strsplit(dummy[2], ","))[1])
y_min_region <- as.numeric(unlist(strsplit(dummy[1], ","))[2])
y_max_region <- as.numeric(unlist(strsplit(dummy[3], ","))[2])
if(length(final_coords)==4){
x_min_region <- min(x_min_region, final_coords[1])
x_max_region <- max(x_max_region, final_coords[2])
y_min_region <- min(y_min_region, final_coords[3])
y_max_region <- max(y_max_region, final_coords[4])
}
final_coords <- c(x_min_region, x_max_region, y_min_region, y_max_region)
return(final_coords)
}
center_crossing <- function(){
coords_tmp <- region_coord[regions_selection[[iter]][section]]
###extract this from Page file
dummy <- unlist(strsplit(coords_tmp, " "))
x_min_region <- as.numeric(unlist(strsplit(dummy[1], ","))[1])
x_max_region <- as.numeric(unlist(strsplit(dummy[2], ","))[1])
coords_tmp <- region_coord[regions_selection[[iter]][section+1]]
dummy <- unlist(strsplit(coords_tmp, " "))
x_min_region2 <- as.numeric(unlist(strsplit(dummy[1], ","))[1])
x_max_region2 <- as.numeric(unlist(strsplit(dummy[2], ","))[1])
region2_mean <- (x_min_region2+x_max_region2)/2
if(region2_mean < x_max_region & region2_mean > x_min_region){
return(FALSE)
}
else{return(TRUE)}
}
################
for(iter in 1:length(regions_selection)){
result <- xmlTreeParse(filenames[[iter]], useInternalNodes = TRUE)
rootnode <- xmlRoot(result)
region_coord <- xpathSApply(rootnode, "//ns:TextRegion/ns:Coords", xmlGetAttr, "points", namespaces = ns)
region_nodes <- xpathSApply(rootnode, "//ns:TextRegion", namespaces = ns)
full_page <- image_read(imagenames[iter])
#plot(full_page)
section <- 1
for(page_region in regions_selection[[iter]]){
lines_nodes <- xpathSApply(region_nodes[[page_region]], "ns:TextLine", namespaces = ns)
if(length(unlist(lines_nodes))==1){
print("Single line")
if(section==length(regions_selection[[iter]])){
print("Final line")
final_coords <- update_coords(region_coord[page_region])
book_region <- image_crop(full_page, paste(final_coords[2] - final_coords[1], "x", final_coords[4] - final_coords[3], "+", final_coords[1], "+", final_coords[3], sep = ""))
plot(book_region)
image_write(book_region, path = paste(output_folder, sprintf("%02d", iter), sprintf("%02d", section), ".png", sep = ""), format = "png")
final_coords <- character()
cat(iter, section, "\n")
section <- section+1
next
}
if(center_crossing()==TRUE){
print("Column switch")
final_coords <- update_coords(region_coord[page_region])
book_region <- image_crop(full_page, paste(final_coords[2] - final_coords[1], "x", final_coords[4] - final_coords[3], "+", final_coords[1], "+", final_coords[3], sep = ""))
plot(book_region)
image_write(book_region, path = paste(output_folder, sprintf("%02d", iter), sprintf("%02d", section), ".png", sep = ""), format = "png")
final_coords <- character()
cat(iter, section, "\n")
section <- section+1
next
}
final_coords <- update_coords(region_coord[page_region])
cat(iter, section, "\n")
section=section+1
}
else{
print("Region ok")
final_coords <- update_coords(region_coord[page_region])
book_region <- image_crop(full_page, paste(final_coords[2] - final_coords[1], "x", final_coords[4] - final_coords[3], "+", final_coords[1], "+", final_coords[3], sep = ""))
plot(book_region)
image_write(book_region, path = paste(output_folder, sprintf("%02d", iter), sprintf("%02d", section), ".png", sep = ""), format = "png")
final_coords <- character()
cat(iter, section, "\n")
section <- section+1
}
}
}
library(tidyverse)
data("diamonds")
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
arrange(desc(n))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1 / 100)
diamonds %>%
count(cut) %>%
ggplot(mapping = aes(cut, n))+ geom_bar(stat = "identity")
diamonds %>%
count(cut) %>%
ggplot(mapping = aes(cut, n))+ geom_bar(stat = "identity", alpha=0.5)
diamonds %>%
count(cut) %>%
ggplot(mapping = aes(cut, n))+ geom_bar(stat = "identity", alpha=0.5, color="red")
diamonds %>%
count(cut) %>%
ggplot(mapping = aes(cut, n))+ geom_bar(stat = "identity", alpha=0.5, fill="red")
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
theme_minimal()
?geom_bin2d
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point(color=price)
ggplot(data = diamonds, mapping = aes(x = carat, y = price, color=price, alpha = price)) + geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = price, color=price)) + geom_point(alpha = 0.5)
ggplot(data = diamonds, mapping = aes(x = carat, y = price, color=price)) +
geom_point(alpha = 0.5) +
scale_color_continuous(low = "blue", high = "red")
ggplot(data = diamonds, mapping = aes(x = size, y = price, color=price)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, mapping = aes(x = x, y = price, color=price)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, mapping = aes(x = x, y = price, color=price)) +
geom_point(alpha = 0.01)
ggplot(data = diamonds, mapping = aes(x = x, y = price)) +
geom_point(alpha = 0.01)
ggplot(data = diamonds, mapping = aes(x = x, y = price)) +
geom_point(alpha = 0.05)
ggplot(data = diamonds, mapping = aes(x = cut, y = price, color=color)) +
geom_point(alpha = 0.05)
ggplot(data = diamonds, mapping = aes(color = cut, y = price, x=color)) +
geom_point(alpha = 0.05)
ggplot(data = diamonds, mapping = aes(color = cut, y = price, x=carat)) +
geom_point(alpha = 0.05)
ggplot(data = diamonds, mapping = aes(y = price, x=carat)) +
geom_point(alpha = 0.05) +
facet_wrap(cut)
ggplot(data = diamonds, mapping = aes(y = price, x=carat)) +
geom_point(alpha = 0.05) +
facet_wrap(~cut)
ggplot(data = diamonds, mapping = aes(x = price, y = carat)) +
geom_point(alpha = 0.05) +
facet_wrap(~cut)
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot() +
geom_point(alpha=0.1)
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot() +
geom_jitter(alpha=0.1)
ggsave("myplot.png")
View(wattpad_header_df)
View(wattpad_header_df_prov)
unique(wattpad_header_df$book)
View(wattpad_header_df)
wattpad_header_df$book_id <- 1
for(i in 2:length(wattpad_header_df$book)){
if(wattpad_header_df$book[i]!=wattpad_header_df$book[i-1]){
wattpad_header_df$book_id[i] <- wattpad_header_df$book_id[i]+1
print(i)
}
}
View(wattpad_header_df)
wattpad_header_df$book_id <- 1
id_count <- 1
for(i in 2:length(wattpad_header_df$book)){
if(wattpad_header_df$book[i]!=wattpad_header_df$book[i-1]){
id_count <- id_count+1
wattpad_header_df$book_id[i] <- id_count
print(i)
}
}
View(wattpad_header_df)
wattpad_header_df$book_id <- 1
id_count <- 1
for(i in 2:length(wattpad_header_df$book)){
if(wattpad_header_df$book[i]!=wattpad_header_df$book[i-1]){
id_count <- id_count+1
wattpad_header_df$book_id[i] <- id_count
print(id_count)
}
}
wattpad_header_df$book_id <- 1
id_count <- 1
for(i in 2:length(wattpad_header_df$book)){
if(wattpad_header_df$book[i]!=wattpad_header_df$book[i-1]){
id_count <- id_count+1
print(id_count)
}
wattpad_header_df$book_id[i] <- id_count
}
View(wattpad_header_df)
remove(i, id_count)
save.image("Stats_classics_148titles.RData")
library(RSelenium)    # Required for webscraping with javascript
remDr <- remoteDriver(port = 4445L) # instantiate remote driver to connect to Selenium Server
remDr$open() # open web browser
remDr$open() # open web browser
url="https://kolimo.uni-goettingen.de/browse.html?author=A"
remDr$navigate(url)
remDr$screenshot(display = TRUE)
url="https://kolimo.uni-goettingen.de/browse.html?author=Ab"
remDr$navigate(url)
remDr$screenshot(display = TRUE)
url="https://kolimo.uni-goettingen.de/browse.html?author=Goethe"
remDr$navigate(url)
print(remDr$getTitle())
LETTERS
url=paste("https://kolimo.uni-goettingen.de/browse.html?author=A", LETTERS, sep = "")
url
url=paste("https://kolimo.uni-goettingen.de/browse.html?author=", LETTERS, sep = "")
url
full_metadata <- data.frame(gnd_id <- character()
author <- character()
title <- character()
date <- character()
link <- character())
full_metadata <- data.frame(gnd_id <- character(),
author <- character(),
title <- character(),
date <- character(),
link <- character())
View(full_metadata)
full_metadata <- data.frame(gnd_id = character(),
author = character(),
title = character(),
date = character(),
link = character())
View(full_metadata)
i=1
paste(url[i], remDr$getTitle())
load("/home/rsimone/Dropbox/Paper Distanza Critica/Kolimo_metadata.RData")
library(RSelenium)    # Required for webscraping with javascript
library(rvest)        # Required for read_html
library(magrittr)     # Required to use the pipes %>%
library(methods)      # to avoid error with nohup
library(stringi)      # to split strings
remDr <- remoteDriver(port = 4445L) # instantiate remote driver to connect to Selenium Server
url <- full_metadata_withDates$link
Kolimo_texts <- character()
i=1
remDr$open() # open web browser
remDr$navigate(url[i])
remDr$getTitle()
1/6148
i=100
i/100==(trunc(i/100))
i=101
i/100==(trunc(i/100))
years_all <- 1700:1950
query <- paste('PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n#Books or literary works published in a certain year\n#added before 2016-10\nSELECT ?subj ?label WHERE {\n  { ?subj wdt:P31 wd:Q571. }\n  UNION\n  { ?subj wdt:P31 wd:Q7725634. }\n  ?subj wdt:P577 ?date.\n  OPTIONAL {\n    {  }\n    UNION\n    {  }\n    \n  }\n  ?subj rdfs:label ?label.\n  FILTER(?date = "', years_all, '-01-01T00:00:00Z"^^xsd:dateTime)\n  FILTER((LANG(?label)) = "en")\n}', sep = "")
load("/home/rsimone/Dropbox/Paper Distanza Critica/Code/Wikidata_query.RData")
View(df_tmp)
load("/home/rsimone/Dropbox/Paper Distanza Critica/Code/Wikidata_query.RData")
View(df_tmp)
View(df_final)
load("/home/rsimone/Dropbox/Paper Distanza Critica/Code/Wikidata_query.RData")
View(df_final)
i=1
qd <- SPARQL(endpoint,query[i])
library(SPARQL) # SPARQL querying package
qd <- SPARQL(endpoint,query[i])
df_tmp <- qd$results
df_tmp$year <- years_all[i]
View(df_tmp)
length(df_tmp)
View(df_tmp)
i=17
print(years_all[i])
i=18
qd <- SPARQL(endpoint,query[i])
df_tmp <- qd$results
length(df_tmp)
i=1
qd <- SPARQL(endpoint,query[i])
df_tmp <- qd$results
View(df_tmp)
load("/home/rsimone/ownCloud/Stats_teenfic_155titles.RData")
View(wattpad_header_df)
load("/home/rsimone/ownCloud/Stats_teenfic_155titles.RData")
View(wattpad_header_df)
load("/home/rsimone/ownCloud/Wattpad_teenfic/Wattpad_corpus_teenfic_2-5.RData")
View(wattpad_header_df)
unique(wattpad_header_df$book)
load("/home/rsimone/ownCloud/Lists_Wattpad_Stories.RData")
View(full_list_teen)
full_list_teen$title[8]
load("/home/rsimone/Dropbox/Goodreads Project/Wattpad_scraping/Lists_Wattpad_Stories.RData")
View(full_list_teen)
2*(0.0178*0.4917)/(0.0178+0.4917)
filenames <- list.files(path = ".", pattern="*.txt", full.names=TRUE)
filenames
setwd("~/ownCloud/Paper Distanza Critica/Musil_texts")
filenames <- list.files(path = ".", pattern="*.txt", full.names=TRUE)
filenames
filenames <- list.files(path = "./.", pattern="*.txt", full.names=TRUE)
filenames
filenames <- list.files(path = "./", pattern="*.txt", full.names=TRUE, recursive = TRUE)
filenames
filenames <- list.files(path = ".", pattern="*.txt", full.names=TRUE, recursive = TRUE)
filenames
setwd("~/ownCloud/Paper Distanza Critica/Musil_texts/full_corpus/")
filenames <- list.files(path = ".", pattern="*.txt", full.names=TRUE, recursive = TRUE)
filenames
for (i in filenames){
print(i)
}
strsplit(filenames, "/")
strsplit(filenames[1], "/"))
strsplit(filenames[1], "/")
unlist(strsplit(filenames[1], "/"))
paste("../corpus/", unlist(strsplit(filenames[1], "/"))[2], "/", unlist(strsplit(filenames[1], "/"))[3], sep = "")
paste("../corpus/", unlist(strsplit(filenames[1], "/"))[2], "_", unlist(strsplit(filenames[1], "/"))[3], sep = "")
prova=c("erao", "err")
cat(prova)
for (i in filenames){
text <- readLines(i)
##remove everythig between {} brackets (i.e. comments)
text <- gsub("\\{[^\\}]*\\}", "", text, perl=TRUE)
text_title <- paste("../corpus/", unlist(strsplit(i, "/"))[2], "_", unlist(strsplit(i, "/"))[3], sep = "")
cat(text, file = text_title)
}
for (i in filenames){
text <- readLines(i)
##remove everythig between {} brackets (i.e. comments)
text <- gsub("\\{[^\\}]*\\}", "", text, perl=TRUE)
##normalize special characters
text <- gsub("ſ", "s", text)
text <- gsub("ä", "ae", text)
text <- gsub("ö", "oe", text)
text <- gsub("ü", "ue", text)
text <- gsub("ß", "ss", text)
text_title <- paste("../corpus/", unlist(strsplit(i, "/"))[2], "_", unlist(strsplit(i, "/"))[3], sep = "")
cat(text, file = text_title)
}
for (i in filenames){
text <- readLines(i)
##remove everythig between {} brackets (i.e. comments)
text <- gsub("\\{[^\\}]*\\}", "", text, perl=TRUE)
##put everything in lowercase
text <- tolower(text)
##normalize special characters
text <- gsub("ſ", "s", text)
text <- gsub("ä", "ae", text)
text <- gsub("ö", "oe", text)
text <- gsub("ü", "ue", text)
text <- gsub("ß", "ss", text)
text_title <- paste("../corpus/", unlist(strsplit(i, "/"))[2], "_", unlist(strsplit(i, "/"))[3], sep = "")
cat(text, file = text_title)
}
dist.cosine.delta = function(x){
# z-scoring the input matrix of frequencies
x = scale(x)
# computing cosine dissimilarity
y = as.dist( x %*% t(x) / (sqrt(rowSums(x^2) %*% t(rowSums(x^2)))) )
# then, turning it into cosine similarity
z = 1 - y
# getting the results
return(z)
}
library(stylo)
setwd("~/ownCloud/Paper Distanza Critica/Musil_texts/")
stylo()
stylo(gui = FALSE, corpus.lang="German", analysis.type="CA", mfw.min=2000, mfw.max=2000, mfw.incr=0, distance.measure="dist.cosine.delta", write.pdf.file = FALSE
stylo(gui = FALSE, corpus.lang="German", analysis.type="CA", mfw.min=2000, mfw.max=2000, mfw.incr=0, distance.measure="dist.cosine.delta", write.pdf.file = FALSE)
text <- read.file(i)
cat(prova)
cat(prova, sep = "\n")
setwd("~/ownCloud/Paper Distanza Critica/Musil_texts/full_corpus/")
filenames <- list.files(path = ".", pattern="*.txt", full.names=TRUE, recursive = TRUE)
for (i in filenames){
text <- read.file(i)
##remove everythig between {} brackets (i.e. comments)
text <- gsub("\\{[^\\}]*\\}", "", text, perl=TRUE)
##put everything in lowercase
cat(text, file = i, sep = "\n")
}
gsub("r", prova)
gsub("r", "", prova)
for (i in filenames){
text <- readLines(i)
##remove everythig between {} brackets (i.e. comments)
text <- gsub("\\{[^\\}]*\\}", "", text, perl=TRUE)
##put everything in lowercase
cat(text, file = i, sep = "\n")
}
